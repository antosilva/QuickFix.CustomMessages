<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var specPath = Host.ResolvePath("DataDictionary.xml");
    var p = new Parser();
    p.Load(specPath);
#>
using System;
using QuickFix.Fields;

namespace <#=Host.ResolveAssemblyReference("$(RootNamespace)")#>.Fields
{
<#
    foreach(var f in p.Fields.Values)
    {#>
    public sealed class <#=f.Name#> : <#=f.FieldType.Class#>
    {
        public <#=f.Name#>(): base(Tags.<#=f.Name#>) { }
        public <#=f.Name#>(<#=f.FieldType.BaseType#> val): base(Tags.<#=f.Name#>, val) { }
<#
        if(f.FieldType.Class == "DateTimeField" || f.FieldType.Class == "TimeOnlyField")
        {#>
        public <#=f.Name#>(<#=f.FieldType.BaseType#> val, bool showMilliseconds): base(Tags.<#=f.Name#>, val, showMilliseconds) { }
<#      }#>
<#      foreach(var e in f.Enums)
        {#>
        <#=e.GetValueString(f.FieldType.BaseType)#>;
<#      }#>
    }
<#  }
#>
}

<#@ include file="Template/SpecParser.ttinclude" #>